{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fswiss\fcharset0 Helvetica-Oblique;\f2\froman\fcharset0 TimesNewRomanPSMT;
\f3\fswiss\fcharset0 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\vieww12000\viewh15840\viewkind0
\deftab720
\pard\pardeftab720\sl276\slmult1\qc\partightenfactor0

\f0\fs22 \cf0 03-60-322 Assignment 2\
William Briguglio\
\pard\pardeftab720\sl276\slmult1\partightenfactor0
\cf0 \
1) When coming across recurring patterns in use cases, the most appropriate option for writing use cases in this situation is to write one use case for all the operations. This is because it is much more efficient than writing a separate use case for each operation, and writing a serparate use case for each operation has no advantages. Additionally simply omitting the use cases from the specification my limit the scope of the project buy not fulfilling certain requirements since the use cases weren't thorough enough.\

\f1\i \

\f0\i0 2). Use Case Model for Canadian Stamps Online.\
\pard\pardeftab720\qc\partightenfactor0
\cf0 Use Case Diagram\
\pard\pardeftab720\partightenfactor0
\cf0 \

\f2 I
\f0 ) 
\f3\b Main success Scenario
\f0\b0 : Customer Buying Stamps \
	1)A customer logs onto the Canadian Stamps Online home page. The home page 	presents the user with the stamps catalogue. Before displaying the stamps offered, 	the website references an inventory list so that it only displays in stock items.\
\pard\pardeftab720\sl276\slmult1\partightenfactor0
\cf0 	2)The customer then scrolls threw the catalogue and adds a variety of stamps to his 	cart via an "add to cart button". \
	3)The customer can view his cart at anytime by clicking the "view cart" button\
		-From this screen the customer can remove items from his cart\
	4)The customer can click pay now from either the view cart screen or home page 	catalogue to go to the checkout screen.\
	5)here the customer is presented with a number of labelled text fields to guide him/her 	through entering his credit card and personal information. \
	6)The customer also chooses from a list of shipping options that when selected, 	automatically adjust the price \
	7)The order review page comes up showing the total, shipping and tax.\
		-system references tax services to determining the tax percentage on purchase\
	8)The customer is prompted to confirm order, if the customer confirms then the 	system 	checks with the credit card services to confirm payment\
		-system also check to make sure all items are still in stock\
	 9)Assuming credit card goes through, and items are all in stock, the customer is 	presented with a reciept on the purchase review page, were the customer can click 	continue shopping to go to the home page. \
	10)The customer is also mailed a tacking number for his parcel as well as email 	confirmation of his purchase. \
	11)The order is also sent to the companies shipping facilities, and inventory is 	updated.\
\
\pard\pardeftab720\sl276\slmult1\partightenfactor0

\f2 \cf0 II
\f0 )
\f3\b Alternate Use Case:
\f0\b0  Error at checkout\
	-a)Customer credit card not accepted\
		-system brings user to credit/personal information page and informs user that 			credit card was not accepted, resume main success use case at 
\f2 I
\f0 .4 \
	-b)out of stock item\
		-system informs user that an item(s) is now out of stock, presents user with 			new total and prompts user to either continue with rest of the order or cancel 		order.\
		-if user continues with order then resume main success use case at 
\f2 I
\f0 .9\
		-if user cancels order then bring user to view cart page, and remove only the 			out of stock items from the cart, resume main success use case at 
\f2 I
\f0 .4 \
	c)credit card is not accepted and item(s) are out of stock \
		-bring user to the view cart page and inform him, credit card did not go 			through and certain items are now out of stock, and remove items from cart. 			resume main success case at 
\f2 I
\f0 .4\
\

\f2 III
\f0 )
\f3\b Alternate Use Case: 
\f0\b0 Customer has promo code\
\pard\pardeftab720\li720\sl276\slmult1\partightenfactor0
\cf0 -Customer enters a code into a text field labelled "promo code" that is on the order review page and would otherwise be left blank if a customer does not wish to use a promo code. \
-After the code is entered, the website references a promo code list and if a match is found, makes the appropriate price adjustments.\
	-if no match is found the page prompts user and to re-enter promo code\
-resumes main success case at 
\f2 I
\f0 .8\
\
\pard\pardeftab720\sl276\slmult1\partightenfactor0
\cf0 3)a)
\f1\i  \
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\sl276\slmult1\partightenfactor0
\cf0 \

\f0\i0 b)The features I think are most impoortant are: \
\pard\pardeftab720\li720\sl276\slmult1\partightenfactor0
\cf0 Organize by date - The ability for the program to determine when the picture was 		take, and organize all photos based on this criteria\
\pard\pardeftab720\sl276\slmult1\partightenfactor0
\cf0 	 Custom Categories - The ability for the user to be able to create their own categories 			and to add their photos to these categories so as to quickly navigate 				to a set of like images in the future \
	Tag Key Words - The ability to let the file manager know important key words that 			help describe a photo so it can be searched for based on this criteria 				later\
	Tag Faces -The ability to let the file manager know who is in the photo, so it can be 			searched for based on this criteria later\
	Tag Location - The ability to let the file manager know where a photo is taken, so it 			can be searched for based on this criteria
\f1\i \

\f0\i0 \
c)	1. Organise by date \
	2. Custom Categories\
	3. Tag Key Words\
	4. Tag Location\
	5. Tag Faces 
\f1\i \

\f0\i0 \
d) If I was a programmer and I was going to develop a file manager program I would use the skills and techniques describes in OOA/D and the UP to build it. I would do this because unlike other methods of (such as waterfall method) these support iteration based development that is dynamic and can change over the course of the design process. For example, a large portion of requirements detailed in the first phases of the process are never used, and the ones that are used are usually changed drastically before the end of the development process. Rather than wasting time outlining and then following a strict guideline set forth at the the beginning of the process, and ending up with something that isn't quite what I want or need, OOA/D and UP would provide flexibility to abandon unnecessary requirements, and correct miss communication and improperly met requirements early on so as to not wast time. Additionally, each feature in my program would be easily conceptualized as an object in an object orientated language, and OOA/D is the best was to design OO software. In short the UP and OOA/D development style is efficient and well suited to this programs design. \
\
4)\
\pard\pardeftab720\sl276\slmult1\partightenfactor0

\f3\b \cf0 Use Case 1: 	Search Via Categories
\f0\b0 \
Primary Actor: 	User of software\
Scope:		Photomanagement system software\
Level:		!User Goal\
\
	The User starts the program and uses its 
\f1\i Custom Catagories
\f0\i0  function to create a new catagorie, then adds his files to it, and then later uses said categorie to narrow his search results\
\

\f3\b Use Case 2:	Search Via Tagged faces
\f0\b0 \
Primary Actor: 	User of software\
Scope:		Photomanagement system software\
Level:		!User Goal\
\
	The user starts the program, then tags the faces of the people in his photographs. Later the user uses the search faces function to narrow his search results to just the photos with a particular person (or persons) in them.\
\

\f3\b Use Case 3:	Search Via Date
\f0\b0 \
Preconditions:	-The software startup was a suceess and user is currently viewing his photos 			in a grid format with thumnails of all the photos in the users default folders. \
		-Software only displays certain file types which by definition include details 			about the date it was created\
\
Main Success Scenario:\
	1. The Software provides a view of the thumnails of all the photos in the users deafult 	folder, with a number of search options presented to him on the side panel.\
	2. User clicks search by date, and a search bar pops up promting the user to enter the 	date in "yyyy/mm/dd" or "yyyy/mm/dd - yyyy/mm/dd" format\
	3. Software displays all photos from said date or within date range\
 	4. The user now has a list of thumbnails of the photos that were taken on the date (or 	in the date range) specified \
\
Extensions:\
	2-3.\
		a. User enters date in incorrect format\
			1. The software returns to step 2. and displays a message notifying the 			user that he has entered the date in an improper format\
		b. No photos are found on the date (or in the date range) specified by the 			User\
\pard\pardeftab720\li2160\sl276\slmult1\partightenfactor0
\cf0 2.The software displays an empty list, without any photos and displays a message notifying the user that there are no photos found on the date (or in the date range) specified\
\pard\pardeftab720\li1440\sl276\slmult1\partightenfactor0
\cf0 c. Multiple photos on the date (or in the date range) specified\
	1.software displays photos from most recent to oldest based upon 	the date and time it was taken\
\pard\pardeftab720\sl276\slmult1\partightenfactor0
\cf0 \
5) \
	No it does make sense to count the number of paths through a use case. A use case could detail the use of a certain feature that is highly customizable, in which case, there would be many different paths through the use case. This does not however indicate that said feature is used often, or is important. Additionally, a easy to implement feature may still have many paths through its use case, and a hard to implement feature may only have a few paths. Thus counting the number of paths could just be extra work that leads to someone falsely thinking a feature is more complex, or important than it actually it. The counting itself may be inaccurate as well, since many of the exception paths return to the main success path at a point before the exception path started, and can therefore just be looped over and ad infinite number of paths through the use case. Lastly, only later on in the development process are all the use cases done in fully-dressed format, and at this point the development team would already need to know which feature(s) is(are) more important or complex.\
\
\
\
\
\
\
\
\
\
\
\
}