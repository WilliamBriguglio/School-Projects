#lang racket
(define (matmat a b)
  (if (> (length a) 0)
    (cons  (vecmat (car a) b) (matmat (cdr a) b))
    (list)
  )
)

(define (vecmat a b)
  (if (> (length (car b)) 0)
      (cons (vecvec a (first b)) (vecmat a (rest b)))
      (list)
  )
)

(define (first b)
  (if (> (length b) 0)
      (cons (car (car b)) (first (cdr b)))
      (list)
  )
)

(define (rest b)
  (if (> (length b) 0)
      (cons (cdr (car b)) (rest (cdr b)))
      (list)
  )
)

(define (vecvec a b)
  (if (> (length a) 0)
      (+ (* (car a) (car b)) (vecvec (cdr a) (cdr b)))
      (+ 0 0)
  )  
)